@page "/fetchdata"
@using System.ComponentModel
@using AntDesign.TableModels

<Table DataSource="@forecasts"
       Total="_total"
       @bind-PageIndex="_pageIndex"
       @bind-PageSize="_pageSize"
       @bind-SelectedRows="selectedRows">
    <Selection Key="@(context.Id.ToString())" />
    <Column @bind-Field="@context.Id" Sortable />
    <Column @bind-Field="@context.Date" Format="yyyy-MM-dd" Sortable />
    <Column @bind-Field="@context.TemperatureC" Sortable />
    <Column Title="Temp. (F)" Field="@context.TemperatureF" />
    <Column Title="Hot" Field="@context.Hot">
        <Switch @bind-Value="@context.Hot"></Switch>
    </Column>
    <Column @bind-Field="@context.Summary" Sortable />
    <ActionColumn>
        <Space>
            <SpaceItem><Button Danger OnClick="()=>Delete(context.Id)">Delete</Button></SpaceItem>
        </Space>
    </ActionColumn>
</Table>

<br />
<p>PageIndex: @_pageIndex | PageSize: @_pageSize | Total: @_total</p>

@code {

    WeatherForecast[] forecasts;

    IEnumerable<WeatherForecast> selectedRows;

    int _pageIndex = 1;
    int _pageSize = 10;
    int _total = 0;

    protected override async Task OnParametersSetAsync()
    {
        forecasts = await GetForecastAsync(_pageIndex, 10000);
        _total = forecasts.Length;
    }

    

    public class WeatherForecast
    {
        public int Id { get; set; }

        [DisplayName("Date")]
        public DateTime? Date { get; set; }

        [DisplayName("Temp. (C)")]
        public int TemperatureC { get; set; }

        [DisplayName("Summary")]
        public string Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);

        public bool Hot { get; set; }
    }

    private static readonly string[] Summaries = new[]
    {
        "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching"
    };

    public Task<WeatherForecast[]> GetForecastAsync(int pageIndex, int pageSize)
    {
        Console.WriteLine(pageIndex);
        var rng = new Random();
        return Task.FromResult(Enumerable.Range((pageIndex - 1) * pageSize + 1, pageSize).Select(index =>
        {
            var temperatureC = rng.Next(-20, 55);
            return new WeatherForecast
            {
                Id = index,
                Date = DateTime.Now.AddDays(index),
                TemperatureC = temperatureC,
                Summary = Summaries[rng.Next(Summaries.Length)],
                Hot = temperatureC > 30,
            };
        }).ToArray());
    }

    public void RemoveSelection(int id)
    {
        var selected = selectedRows.Where(x => x.Id != id);
        selectedRows = selected;

        //table.SetSelection(selected.Select(x => x.Id.ToString()).ToArray());
    }

    private void Delete(int id)
    {
        forecasts = forecasts.Where(x => x.Id != id).ToArray();
        _total = forecasts.Length;
    }
}